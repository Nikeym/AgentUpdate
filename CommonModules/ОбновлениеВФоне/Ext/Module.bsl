
&НаСервере
Процедура ОбновлениеСЗавершениемРаботыПользователей() Экспорт
	
 	Запрос = Новый Запрос("ВЫБРАТЬ
 	                      |	ЛогиСрезПоследних.Период,
 	                      |	ЛогиСрезПоследних.База,
 	                      |	ЛогиСрезПоследних.Лог,
 	                      |	ЛогиСрезПоследних.Пользователь
 	                      |ИЗ
 	                      |	РегистрСведений.Логи.СрезПоследних(
 	                      |			,
 	                      |			Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыОбновлений.ОжидаетсяОтключениеПользователей)
 	                      |				И ДатаОкончания < &Период) КАК ЛогиСрезПоследних");
	Запрос.УстановитьПараметр("Период", ТекущаяДата() - Константы.ЗадержкаПередОбновлением.Получить()*60);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		База = Выборка.База;
		ПоследнееНеДинамо = РегистрыСведений.Логи.ПоследнееНеДинамическоеОбновление(База);
		Если ПоследнееНеДинамо = Неопределено ИЛИ ПоследнееНеДинамо < ТекущаяДата() - Константы.МинимальноеВремяМеждуОбновлениями.Получить() * 60 Тогда 
			МенСтруктура = Новый Структура;
			МенСтруктура.Вставить("Период", Выборка.Период);
			МенСтруктура.Вставить("Лог", Выборка.Лог);
			МенСтруктура.Вставить("Пользователь", Выборка.Пользователь);
			ПрМассив = Новый Массив;
			ПрМассив.Добавить(База); 
			ПрМассив.Добавить(МенСтруктура);
			ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбновлениеВФоне.ОбновитьСУдалениемСеансов", ПрМассив, Строка(База));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Обновление(База, МенеджерЗаписиЛога = Неопределено) Экспорт
	
	Если МенеджерЗаписиЛога = Неопределено Тогда 
		МенеджерЗаписиЛога = ЗаписатьЛог(База);
	КонецЕсли;
	
	ОбновитьСЗавершениемРаботы = Ложь;
	Скрипт = ПолучитьСкрипт(База);
	ЗапуститьПриложение(Скрипт,, Истина);
	
	Лог = ПолучитьЛогИзФайла(База.ПутьКФайлуЛогов);
	
	Если Найти(Лог, "С этой информационной базой уже работает конфигуратор:") Тогда
		ПараметрыКластера = ПараметрыАдминистрированияКластера(База.Сервер, База.ПортКластера, База.ПортСервера);
		ПараметрыИБ = ПараметрыАдминистрированияИнформационнойБазыКластера(База, База.Пользователь, База.Пароль);
		УдалениеСеансовУстановкаБлокировки(ПараметрыКластера, ПараметрыИБ, ВсеКромеКонфигуратора(Ложь), Ложь);
		ЗапуститьПриложение(Скрипт,, Истина);
		Лог = Лог + Символы.ПС + "---------- " + Строка(ТекущаяДата()) + " ----------" + Символы.ПС + ПолучитьЛогИзФайла(База.ПутьКФайлуЛогов);
	КонецЕсли;
	
	Если Найти(Лог, "Активны сеансы:") Тогда 
		ОбновитьСЗавершениемРаботы = Истина;
		Если ЗначениеЗаполнено(База.ExecuteCode) Тогда
			ПоследнееОбновление = РегистрыСведений.Логи.ПоследнееНеДинамическоеОбновление(База);
			ТекДата = ТекущаяДата();
			МинимальноеВремяМеждуОбновлениями = Константы.МинимальноеВремяМеждуОбновлениями.Получить();
			Если НЕ ПоследнееОбновление = Неопределено И ПоследнееОбновление > ТекДата - МинимальноеВремяМеждуОбновлениями*60 Тогда 
				Результат = РаботаСВеб.УстановитьУведомлениеОбОбновлении(База, ПоследнееОбновление + МинимальноеВремяМеждуОбновлениями*60);
			Иначе 
				Результат = РаботаСВеб.УстановитьУведомлениеОбОбновлении(База, ТекДата + Константы.ЗадержкаПередОбновлением.Получить()*60);
			КонецЕсли;
			Если НЕ Результат = Истина Тогда 
				Лог = Лог + Символы.ПС + Символы.ПС + Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьЛог(База, Лог, МенеджерЗаписиЛога, ОбновитьСЗавершениемРаботы);
	
	Если ОбновитьСЗавершениемРаботы Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ Период ИЗ РегистрСведений.Логи КАК Логи ГДЕ База = &База И Результат = &Результат");
		Запрос.УстановитьПараметр("База", База);
		Запрос.УстановитьПараметр("Результат", Перечисления.РезультатыОбновлений.ВОчереди);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл 
				Менеджер = РегистрыСведений.Логи.СоздатьМенеджерЗаписи();
				Менеджер.База = База;
				Менеджер.Период = Выборка.Период;
				Менеджер.Удалить();
			КонецЦикла;
		КонецЕсли;
	Иначе 
		ОбновитьИзОчереди(База);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСУдалениемСеансов(База, МенеджерЗаписиЛогаСтруктура) Экспорт
	
	МенеджерЗаписиЛога = РегистрыСведений.Логи.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛога.Результат = Перечисления.РезультатыОбновлений.Обновляется;
	МенеджерЗаписиЛога.Период = ТекущаяДата();	
	МенеджерЗаписиЛога.База = База;
	МенеджерЗаписиЛога.Пользователь = МенеджерЗаписиЛогаСтруктура.Пользователь;
	
	МенеджерЗаписиЛога.Лог = "Старт не динамического обновления..." + Символы.ПС;
	МенеджерЗаписиЛога.Лог = МенеджерЗаписиЛога.Лог + "Время запуска обновления пользователем: " + Строка(МенеджерЗаписиЛогаСтруктура.Период); 	
	МенеджерЗаписиЛога.Лог = МенеджерЗаписиЛога.Лог + Символы.ПС + Символы.ПС;
	МенеджерЗаписиЛога.Лог = МенеджерЗаписиЛога.Лог + МенеджерЗаписиЛогаСтруктура.Лог + Символы.ПС + Символы.ПС;
	
	МенеджерЗаписиЛога.Записать();
	
	ОчисткаРегистров.УдалитьЗаписьЛога(База, МенеджерЗаписиЛогаСтруктура.Период);
	
	Скрипт = ПолучитьСкрипт(База);
	
	ПараметрыКластера = ПараметрыАдминистрированияКластера(База.Сервер, База.ПортКластера, База.ПортСервера);
	ПараметрыИБ = ПараметрыАдминистрированияИнформационнойБазыКластера(База, База.Пользователь, База.Пароль);
	Лог = "Активны сеансы:";
	Счетчик = 0;
	Пока Найти(Лог, "Активны сеансы:") И Счетчик < 3 Цикл
		УдалениеСеансовУстановкаБлокировки(ПараметрыКластера, ПараметрыИБ,, Истина); 				
		ЗапуститьПриложение(Скрипт,, Истина);
		Лог = ПолучитьЛогИзФайла(База.ПутьКФайлуЛогов);
		МенеджерЗаписиЛога.Лог = МенеджерЗаписиЛога.Лог + Символы.ПС + "----------" + Символы.ПС + Строка(ТекущаяДата()) + Символы.ПС + "----------" + Символы.ПС + Лог;
		МенеджерЗаписиЛога.Записать();
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ЗаписатьЛог(База, МенеджерЗаписиЛога.Лог, МенеджерЗаписиЛога);
	
	ОбновитьИзОчереди(База);
	СнятиеБлокировки(ПараметрыКластера, ПараметрыИБ);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСкрипт(База)
	Возврат """"+Константы.КаталогС1СEXE.Получить()+""" DESIGNER /S"""+База.Сервер+":"+формат(База.ПортКластера, "ЧГ=0")+"\"+База+""" /N """+База.Пользователь+""" /P """+База.Пароль+"""/UC """+Константы.КодБлокировки.Получить()+""" /ConfigurationRepositoryF"""+База.Хранилище+""" /ConfigurationRepositoryN"""+База.ПользовательХранилища+""" /ConfigurationRepositoryP"""+База.ПарольХранилища+""" /ConfigurationRepositoryUpdateCfg - force /UpdateDBCfg /Out """+База.ПутьКФайлуЛогов+"""";	
КонецФункции

&НаСервере
Функция БазаОбновлена(Лог) Экспорт
	 
	Если Найти(Лог, "Обновление конфигурации успешно завершено") ИЛИ 
		(Прав(Лог, 162) = "---- Начало операции с хранилищем конфигурации ----"+Символы.ПС+"---- Операция с хранилищем конфигурации завершена ----"+Символы.ПС+"Обновление конфигурации из хранилища успешно завершено"+Символы.ПС) Тогда
		Возврат Истина
	Иначе 
		Возврат Ложь
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ЗаписатьЛог(База, Лог = "", Менеджер = Неопределено, ОбновитьСЗавершениемРаботы = Ложь) Экспорт
	
	Если Менеджер = Неопределено Тогда
		Менеджер = РегистрыСведений.Логи.СоздатьМенеджерЗаписи();
		Менеджер.Период = ТекущаяДата();
		Менеджер.База =	База;
		Менеджер.Результат = Перечисления.РезультатыОбновлений.Обновляется;
		Менеджер.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Менеджер.Записать();
		Возврат Менеджер;
	Иначе
		Если БазаОбновлена(Лог) Тогда 
			Менеджер.Результат = Перечисления.РезультатыОбновлений.Успешно;
		Иначе
			Если ОбновитьСЗавершениемРаботы Тогда 
				Менеджер.Результат = Перечисления.РезультатыОбновлений.ОжидаетсяОтключениеПользователей;
			Иначе 
				Менеджер.Результат = Перечисления.РезультатыОбновлений.Ошибка;
			КонецЕсли;
		КонецЕсли;
		Менеджер.База =	База;
		Менеджер.Лог = Лог;
		Менеджер.ДатаОкончания = ТекущаяДата();
		Менеджер.Записать();
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ВыполнениеКодаВеб(СтрТч, БлокировкаУстановлена)
	
	Прокси = ПолучитьПодключение(СтрТч.ExecuteCode, СтрТч.Пользователь, СтрТч.Пароль, "http://execute.org");
	
	Блокировка = Новый БлокировкаСеансов;
	Блокировка.Начало           = ТекущаяДата() - 1200;
	Блокировка.Сообщение        = "ВНИМАНИЕ! Идет обновление тестового контура!"; 
	Блокировка.Установлена      = БлокировкаУстановлена;
	Блокировка.КодРазрешения    = Константы.КодБлокировки.Получить();
	
	СтруктураПараметровТекст = ЗначениеВСтрокуВнутр(Блокировка);
	ТекстКода = "УстановитьБлокировкуСеансов(ЗначениеИзСтрокиВнутр(TextParameters));
	|  Результат = ЗначениеВСтрокуВнутр(Истина);";
	Результат = ЗначениеИзСтрокиВнутр(Прокси.ExecuteCode(ТекстКода, СтруктураПараметровТекст));
	Если Не Результат Тогда
		#Если Клиент Тогда
			Сообщить("Не удалось установить блокировку сеансов... База " + СтрЗаменить(Сред(Элем.АдресПодключения, 19), "/ws_ExecuteCode.1cws?wsdl", "") + ". " + Строка(Результат));
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина
КонецФункции

&НаСервере
Функция ПолучитьПодключение(АдресПодключения, Логин, Пароль, ПространствоИмен) Экспорт
	
	WebСервис = Метаданные.WebСервисы.ExecuteCode;
	Определение = Новый WSОпределения(АдресПодключения, Логин, Пароль);
	Прокси = Новый WSПрокси(Определение, ПространствоИмен, WebСервис.Имя, "ExecuteCodeSoap");
	Прокси.Пользователь = Логин;		
	Прокси.Пароль = Пароль;
	Возврат Прокси;
	
КонецФункции

&НаСервере
Функция ПараметрыАдминистрированияКластера(СерверИмя, ПортКластера, ПортСервера) Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("ТипПодключения", "COM"); // "COM" или "RAS"
	
	// Только для "COM"
	Результат.Вставить("АдресАгентаСервера", СерверИмя);
	Результат.Вставить("ПортАгентаСервера", ПортСервера);
	
	//// Только для "RAS"
	//Результат.Вставить("АдресСервераАдминистрирования", СерверПорт);
	//Результат.Вставить("ПортСервераАдминистрирования", СерверПорт + 4);
	//
	Результат.Вставить("ПортКластера", ПортКластера);
	Результат.Вставить("ИмяАдминистратораКластера", "");
	Результат.Вставить("ПарольАдминистратораКластера", "");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыАдминистрированияИнформационнойБазыКластера(БазаИмя, БазаПользовательИмя, БазаПользовательПароль) Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИмяВКластере", Строка(БазаИмя));
	Результат.Вставить("ИмяАдминистратораИнформационнойБазы", БазаПользовательИмя);
	Результат.Вставить("ПарольАдминистратораИнформационнойБазы", БазаПользовательПароль);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВсеКромеКонфигуратора(ТолькоПользователей = Истина) Экспорт
	
	ВсеКромеКонфигуратора = Новый Структура;
	ВсеКромеКонфигуратора.Вставить("Свойство", "ИдентификаторКлиентскогоПриложения");
	ВсеКромеКонфигуратора.Вставить("ВидСравнения", ?(ТолькоПользователей, ВидСравнения.НеРавно, ВидСравнения.Равно));
	ВсеКромеКонфигуратора.Вставить("Значение", "Designer");
	Фильтр = Новый Массив;
	Фильтр.Добавить(ВсеКромеКонфигуратора);
	Возврат Фильтр;
	
КонецФункции

&НаСервере
Процедура УдалениеСеансовУстановкаБлокировки(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, Фильтр, УстановитьБлокировку) Экспорт
	АдминистрированиеКластера.УдалитьСеансыИнформационнойБазы(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ, Фильтр, УстановитьБлокировку); 	
КонецПроцедуры

&НаСервере
Процедура СнятиеБлокировки(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ)
	АдминистрированиеКластера.СнятьБлокировкуИБ(ПараметрыАдминистрированияКластера, ПараметрыАдминистрированияИБ);	
КонецПроцедуры

&НаСервере
Функция ОбновлениеЗапущено(База, Инфо = "") Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Ключ", Строка(База));
	Структура.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Если ФоновыеЗадания.ПолучитьФоновыеЗадания(Структура).Количество() Тогда
		Инфо = "Обновление базы " + База + " уже запущено!";
		Возврат Истина;	
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛогиСрезПоследних.Период,
	               |	ВЫБОР
	               |		КОГДА ЛогиСрезПоследних.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыОбновлений.ОжидаетсяОтключениеПользователей)
	               |			ТОГДА ""НеДинамо""
	               |		КОГДА ЛогиСрезПоследних.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыОбновлений.ОбновлениеОтложено)
	               |			ТОГДА ""ОбновлениеОтложено""
	               |		КОГДА ЛогиСрезПоследних.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыОбновлений.Обновляется)
	               |			ТОГДА ""Обновляется""
	               |		ИНАЧЕ ""НеОбновляется""
	               |	КОНЕЦ КАК Результат
	               |ИЗ
	               |	РегистрСведений.Логи.СрезПоследних(, База = &База) КАК ЛогиСрезПоследних";
	Запрос.УстановитьПараметр("База", База);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Результат = "НеДинамо" Тогда
			Инфо = "Для базы " + База + " запланировано не динамическое обновление!";
			Возврат Истина;
		ИначеЕсли Выборка.Результат = "ОбновлениеОтложено" Тогда
			Инфо = "Обновление базы " + База + " отложено администратором!";
			Возврат Истина;			
		ИначеЕсли Выборка.Результат = "Обновляется" Тогда
			Инфо = "Обновление базы " + База + " уже запущено.";
			Возврат Истина;
		Иначе 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВыполнитьСкриптВыгрузкаCF(ПутьКФайлуCF, База, ИзХранилища = Истина) Экспорт
	
	Если ИзХранилища Тогда 
		ЗапуститьПриложение("""" + Константы.КаталогС1СEXE.Получить() + """ DESIGNER /F""" +База.Сервер + """ /DisableStartupMessages /ConfigurationRepositoryF""" + База.Хранилище + """ /ConfigurationRepositoryN""" + База.ПользовательХранилища + """ /ConfigurationRepositoryP""" + База.ПарольХранилища + """ /ConfigurationRepositoryDumpCfg """ + ПутьКФайлуCF + """ /Out " +База.ПутьКФайлуЛогов + """",,Истина);
	Иначе 
		ЗапуститьПриложение("""" + Константы.КаталогС1СEXE.Получить() + """ DESIGNER /F""" +База.Сервер + """ /DisableStartupMessages /ConfigurationRepositoryF""" + База.Хранилище + """ /ConfigurationRepositoryN""" + База.ПользовательХранилища + """ /ConfigurationRepositoryP""" + База.ПарольХранилища + """ /ConfigurationRepositoryUpdateCfg - force /Out """ + База.ПутьКФайлуЛогов + """",,Истина);
		Если ОбъектыПолучены (База.ПутьКФайлуЛогов) Тогда
			ЗапуститьПриложение("""" + Константы.КаталогС1СEXE.Получить() + """ DESIGNER /F""" +База.Сервер + """ /DisableStartupMessages /ConfigurationRepositoryF""" + База.Хранилище + """ /ConfigurationRepositoryN""" + База.ПользовательХранилища + """ /ConfigurationRepositoryP""" + База.ПарольХранилища + """ /DumpCfg """ + ПутьКФайлуCF + """ /Out """ + База.ПутьКФайлуЛогов + """",,Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбъектыПолучены(ПутьКФайлуЛога)
		
	Лог = ПолучитьЛогИзФайла (ПутьКФайлуЛога);
	Если Найти(Лог, "Обновление конфигурации из хранилища успешно завершено") Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПолучитьЛогИзФайла(ПутьКфайлу) Экспорт
	
	ТекДата = ТекущаяДата();
	
	ТекстИзФайла = Новый ТекстовыйДокумент;
	ТекстИзФайла.Прочитать(ПутьКфайлу);
	Лог = ТекстИзФайла.ПолучитьТекст();
	Если Лог = "" Тогда
		Если ТекДата <= ТекущаяДата()-30 Тогда 
			ТекстИзФайла.Прочитать(ПутьКфайлу);
			Лог = ТекстИзФайла.ПолучитьТекст();
		Иначе 
			Лог = "Не удалось прочитать файл с логом. Повторите попытку.";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Лог;
	
КонецФункции

&НаСервере
Процедура СтартПринудительногоОбновления(База) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЛогиСрезПоследних.Период,
	                      |	ЛогиСрезПоследних.Лог,
	                      |	ЛогиСрезПоследних.Пользователь
	                      |ИЗ
	                      |	РегистрСведений.Логи.СрезПоследних(
	                      |			,
	                      |			Результат В (ЗНАЧЕНИЕ(Перечисление.РезультатыОбновлений.ОжидаетсяОтключениеПользователей), ЗНАЧЕНИЕ(Перечисление.РезультатыОбновлений.ОбновлениеОтложено))
	                      |				И База = &База) КАК ЛогиСрезПоследних");
	Запрос.УстановитьПараметр("База", База);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		МенСтруктура = Новый Структура;
		МенСтруктура.Вставить("Период", Выборка.Период);
		МенСтруктура.Вставить("Лог", "Принудительный запуск обновления администратором" + Символы.ПС + Выборка.Лог);
		МенСтруктура.Вставить("Пользователь", Выборка.Пользователь);
		
		ТекстКода = "Константы.споОбновление.Установить(Ложь); 
		|  Результат = ЗначениеВСтрокуВнутр(Истина);";
		Результат = РаботаСВеб.ВыполнитьКодWS(База, ТекстКода);
		
		ОбновитьСУдалениемСеансов(База, МенСтруктура);
		
	Иначе
		
		МенеджерЗаписиЛога = ЗаписатьЛог(База);
		
		Скрипт = ПолучитьСкрипт(База);
		ЗапуститьПриложение(Скрипт,, Истина);
		
		Лог = ПолучитьЛогИзФайла(База.ПутьКФайлуЛогов);
		
		Если Найти(Лог, "С этой информационной базой уже работает конфигуратор:") Тогда
			ПараметрыКластера = ПараметрыАдминистрированияКластера(База.Сервер, База.ПортКластера, База.ПортСервера);
			ПараметрыИБ = ПараметрыАдминистрированияИнформационнойБазыКластера(База, База.Пользователь, База.Пароль);
			УдалениеСеансовУстановкаБлокировки(ПараметрыКластера, ПараметрыИБ, ВсеКромеКонфигуратора(Ложь), Ложь);
			ЗапуститьПриложение(Скрипт,, Истина);
			Лог = Лог + Символы.ПС + "---------- " + Строка(ТекущаяДата()) + " ----------" + Символы.ПС + ПолучитьЛогИзФайла(База.ПутьКФайлуЛогов);
		КонецЕсли;
		
		Если Найти(Лог, "Активны сеансы:") Тогда
			МенСтруктура = Новый Структура;
			МенСтруктура.Вставить("Период", МенеджерЗаписиЛога.Период);
			МенСтруктура.Вставить("Лог", "Принудительный запуск обновления администратором" + Символы.ПС + МенеджерЗаписиЛога.Лог);
			МенСтруктура.Вставить("Пользователь", МенеджерЗаписиЛога.Пользователь);
			
			ОбновитьСУдалениемСеансов(База, МенСтруктура);
		Иначе 
			ЗаписатьЛог(База, Лог, МенеджерЗаписиЛога);
			ОбновитьИзОчереди(База);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеБазыTemplate() Экспорт
	База = Константы.Template.Получить();
	Скрипт = ПолучитьСкрипт(База);
	ПараметрыКластера = ПараметрыАдминистрированияКластера(База.Сервер, База.ПортКластера, База.ПортСервера);
	ПараметрыИБ = ПараметрыАдминистрированияИнформационнойБазыКластера(База, База.Пользователь, База.Пароль);
	УдалениеСеансовУстановкаБлокировки(ПараметрыКластера, ПараметрыИБ,, Истина); 				
	ЗапуститьПриложение(Скрипт,, Истина);
	СнятиеБлокировки(ПараметрыКластера, ПараметрыИБ);
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзОчереди(База)
	
	Запрос = Новый Запрос("ВЫБРАТЬ Период, Пользователь ИЗ РегистрСведений.Логи КАК Логи ГДЕ База = &База И Результат = &Результат");
	Запрос.УстановитьПараметр("База", База);
	Запрос.УстановитьПараметр("Результат", Перечисления.РезультатыОбновлений.ВОчереди);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		МассивМенеджеров = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			Менеджер = РегистрыСведений.Логи.СоздатьМенеджерЗаписи();
			Менеджер.База = База;
			Менеджер.Период = Выборка.Период;
			Менеджер.Результат = Перечисления.РезультатыОбновлений.Обновляется;
			Менеджер.Пользователь = Выборка.Пользователь;
			Менеджер.Записать();
			МассивМенеджеров.Добавить(Менеджер);
		КонецЦикла;
		
		ДатаСтартаОбновленияИзОчереди = ТекущаяДата();
		Скрипт = ПолучитьСкрипт(База);
		ЗапуститьПриложение(Скрипт,, Истина);
		Лог = ПолучитьЛогИзФайла(База.ПутьКФайлуЛогов);
		
		Если Найти(Лог, "С этой информационной базой уже работает конфигуратор:") Тогда
			ПараметрыКластера = ПараметрыАдминистрированияКластера(База.Сервер, База.ПортКластера, База.ПортСервера);
			ПараметрыИБ = ПараметрыАдминистрированияИнформационнойБазыКластера(База, База.Пользователь, База.Пароль);
			УдалениеСеансовУстановкаБлокировки(ПараметрыКластера, ПараметрыИБ, ВсеКромеКонфигуратора(Ложь), Ложь);
			ЗапуститьПриложение(Скрипт,, Истина);
			Лог = Лог + Символы.ПС + "---------- " + Строка(ТекущаяДата()) + " ----------" + Символы.ПС + ПолучитьЛогИзФайла(База.ПутьКФайлуЛогов);
		КонецЕсли;
		
		Лог = "Время запуска обновления пользователем: &Период" + Символы.ПС + Символы.ПС + Лог;
		Лог = "Старт обновления из очереди..." + Символы.ПС + Лог;
		
		РезультатОбновления = Перечисления.РезультатыОбновлений[?(БазаОбновлена(Лог), "Успешно", "Ошибка")];
		ДатаОкончанияОбновленияИзОчереди = ТекущаяДата();
		
		Для Каждого Менеджер Из МассивМенеджеров Цикл
			Менеджер.Лог = СтрЗаменить(Лог, "&Период", Строка(Менеджер.Период));
			Менеджер.Период = ДатаСтартаОбновленияИзОчереди;
			Менеджер.Результат = РезультатОбновления;
			Менеджер.ДатаОкончания = ДатаОкончанияОбновленияИзОчереди;
			Менеджер.Записать();
			
			ДатаСтартаОбновленияИзОчереди = ДатаСтартаОбновленияИзОчереди + 1;
		КонецЦикла;
		
		ОбновитьИзОчереди(База);
		
	КонецЕсли;
	
КонецПроцедуры