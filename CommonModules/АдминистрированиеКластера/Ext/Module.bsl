Процедура УдалитьСеансыИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач Фильтр = Неопределено, УстановитьБлокировку = Ложь) Экспорт
	
	COMСоединитель = Новый COMОбъект("v83.COMConnector");
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Claster = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
		
	Если УстановитьБлокировку Тогда
			
		УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы (ПараметрыАдминистрированияКластера, 
			ПараметрыАдминистрированияИБ, 
			СвойстваБлокировкиСеансовИРегламентныхЗаданий(Истина,,,Константы.КодБлокировки.Получить()), 
			COMСоединитель, 
			СоединениеСАгентомСервера, 
			Claster);
		
	КонецЕсли;
	
	
	ОписаниеИнформационнойБазы = ПолучитьОписаниеИБ(
		СоединениеСАгентомСервера,
		Claster,
		ПараметрыАдминистрированияИБ.ИмяВКластере);
	
	Сеансы = ПолучитьСеансы(СоединениеСАгентомСервера, Claster, ОписаниеИнформационнойБазы, Фильтр, Ложь);
	
	Для Каждого Сеанс Из Сеансы Цикл
		
		Попытка
			
			СоединениеСАгентомСервера.TerminateSession(Claster, Сеанс);
			
		Исключение
			
			// Сеанс мог завершиться к моменту вызова TerminateSession.
			
			ОтборСеансов = Новый Структура("Номер", Сеанс.Номер);
			
			Если ПолучитьСеансы(СоединениеСАгентомСервера, Claster, ОписаниеИнформационнойБазы, ОтборСеансов, Ложь).Количество() > 0 Тогда
				ВызватьИсключение;
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СнятьБлокировкуИБ(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач Фильтр = Неопределено) Экспорт
	
	COMСоединитель = Новый COMОбъект("v83.COMConnector");
	
	СоединениеСАгентомСервера = СоединениеСАгентомСервера(
		COMСоединитель,
		ПараметрыАдминистрированияКластера.АдресАгентаСервера,
		ПараметрыАдминистрированияКластера.ПортАгентаСервера);
	
	Claster = ПолучитьКластер(
		СоединениеСАгентомСервера,
		ПараметрыАдминистрированияКластера.ПортКластера,
		ПараметрыАдминистрированияКластера.ИмяАдминистратораКластера,
		ПараметрыАдминистрированияКластера.ПарольАдминистратораКластера);
		
	УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы (ПараметрыАдминистрированияКластера, 
		ПараметрыАдминистрированияИБ, 
		СвойстваБлокировкиСеансовИРегламентныхЗаданий(Ложь,,,Константы.КодБлокировки.Получить()), 
		COMСоединитель, 
		СоединениеСАгентомСервера, 
		Claster);
	
КонецПроцедуры	

Процедура УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(Знач ПараметрыАдминистрированияКластера, Знач ПараметрыАдминистрированияИБ, Знач СвойстваБлокировкиСеансовИЗаданий, 
	COMСоединитель, СоединениеСАгентомСервера, Claster) Экспорт
		
	СоединениеСРабочимПроцессом = СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Claster);
	
	ИнформационнаяБаза = ПолучитьИБ(
		СоединениеСРабочимПроцессом,
		Claster,
		ПараметрыАдминистрированияИБ.ИмяВКластере,
		ПараметрыАдминистрированияИБ.ИмяАдминистратораИнформационнойБазы,
		ПараметрыАдминистрированияИБ.ПарольАдминистратораИнформационнойБазы);
	
	а = ИнформационнаяБаза.SessionsDenied;
	
	ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(
		ИнформационнаяБаза,
		СвойстваБлокировкиСеансовИЗаданий,
		СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий());
	
	СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБаза);
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваОбъектаОбъектнойМоделиCOMАдминистратораПоОписанию(Объект, Знач Описание, Знач Словарь)
	
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Объект[ФрагментСловаря.Значение] = Описание[ФрагментСловаря.Ключ];
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИБ(СоединениеСРабочимПроцессом, Claster, Знач ИмяВКластере, Знач ИмяАдминистратораИБ, Знач ПарольАдминистратораИБ)
	
	СоединениеСРабочимПроцессом.AddAuthentication(ИмяАдминистратораИБ, ПарольАдминистратораИБ);
	
	Для Каждого ИнформационнаяБаза Из СоединениеСРабочимПроцессом.GetInfoBases() Цикл
		
		Если ИнформационнаяБаза.Name = ИмяВКластере Тогда
			
			Если Не ЗначениеЗаполнено(ИнформационнаяБаза.DBMS) Тогда
				
				ВызватьИсключение ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неправильные имя и пароль администратора информационной базы %1 в кластере серверов %2:%3 (имя: ""%4"").'"),
					ИмяВКластере,
					Claster.HostName, Claster.MainPort,
					ИмяАдминистратораИБ);
				
			КонецЕсли;
			
			Возврат ИнформационнаяБаза;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В кластере серверов %1:%2 не найдена информационная база ""%3""!'"),
		Claster.HostName,
		Формат(Claster.MainPort, "ЧГ=0"),
		ИмяВКластере
	);
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьОписаниеИБ(СоединениеСАгентомСервера, Claster, Знач ИмяВКластере)
	
	Для Каждого ОписаниеИнформационнойБазы Из СоединениеСАгентомСервера.GetInfoBases(Claster) Цикл
		
		Если ОписаниеИнформационнойБазы.Name = ИмяВКластере Тогда
			
			Возврат ОписаниеИнформационнойБазы;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В кластере серверов %1:%2 не найдена информационная база ""%3""!'"),
		Claster.HostName,
		Формат(Claster.MainPort, "ЧГ=0"),
		ИмяВКластере
	);
	
КонецФункции

Функция ПолучитьКластер(СоединениеСАгентомСервера, Знач ПортКластера, Знач ИмяАдминистратораКластера, Знач ПарольАдминистратораКластера)
	
	Для Каждого Claster Из СоединениеСАгентомСервера.GetClusters() Цикл
		
		Если Claster.MainPort = ПортКластера Тогда
			
			СоединениеСАгентомСервера.Authenticate(Claster, ИмяАдминистратораКластера, ПарольАдминистратораКластера);
			
			Возврат Claster;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение ПодставитьПараметрыВСтроку(
		НСтр("ru = 'На рабочем сервере %1 не найден кластер %2'"),
		СоединениеСАгентомСервера.ConnectionString,
		ПортКластера);
	
КонецФункции

Функция СоединениеСАгентомСервера(COMСоединитель, Знач АдресАгентаСервера, Знач ПортАгентаСервера)
	
	СтрокаСоединенияСАгентомСервера = "tcp://" + АдресАгентаСервера + ":" + Формат(ПортАгентаСервера, "ЧГ=0");
	СоединениеСАгентомСервера = COMСоединитель.ConnectAgent(СтрокаСоединенияСАгентомСервера);
	Возврат СоединениеСАгентомСервера;
	
КонецФункции

Функция СвойстваБлокировкиСеансовИРегламентныхЗаданий(БлокировкаСеансов = Истина, БлокировкаРегламентныхЗаданий = Истина, СообщениеТекст = "ВНИМАНИЕ! Идет подготовка тестового контура!", КодРазрешения, ДатаПо = Неопределено) Экспорт
	
	Результат = Новый Структура();
	
	Если ДатаПо = Неопределено Тогда
		ДатаПо = Дата(1,1,1);
	КонецЕсли;
	
	Результат.Вставить("БлокировкаСеансов", БлокировкаСеансов);
	//Если БлокировкаСеансов Тогда
		Результат.Вставить("ДатаС", ТекущаяДата() - 1);
		Результат.Вставить("ДатаПо", ДатаПо);
		Результат.Вставить("Сообщение", СообщениеТекст);
		Результат.Вставить("КодРазрешения", КодРазрешения);
	//Иначе
	//	Результат.Вставить("ДатаС", Дата(1,1,1));
	//	Результат.Вставить("ДатаПо", Дата(1,1,1));
	//	Результат.Вставить("Сообщение");
	//	Результат.Вставить("КодРазрешения");
	//КонецЕсли;
	Результат.Вставить("БлокировкаРегламентныхЗаданий", БлокировкаРегламентныхЗаданий);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСеансы(СоединениеСАгентомСервера, Claster, ИнформационнаяБаза, Знач Фильтр = Неопределено, Знач Описания = Ложь)
	
	Сеансы = Новый Массив;
	
	Словарь = СловарьСвойствСеансов();
	
	Для Каждого Сеанс Из СоединениеСАгентомСервера.GetInfoBaseSessions(Claster, ИнформационнаяБаза) Цикл
		
		ОписаниеСеанса = ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Сеанс, Словарь);
		
		Если ПроверитьУсловияФильтра(ОписаниеСеанса, Фильтр) Тогда
			
			Если Описания Тогда
				Сеансы.Добавить(ОписаниеСеанса);
			Иначе
				Сеансы.Добавить(Сеанс);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сеансы;
	
КонецФункции

Функция СловарьСвойствСеансов()
	
	Результат = Новый Структура();
	
	Результат.Вставить("Номер", "SessionID");
	Результат.Вставить("ИмяПользователя", "UserName");
	Результат.Вставить("ИмяКлиентскогоКомпьютера", "Host");
	Результат.Вставить("ИдентификаторКлиентскогоПриложения", "AppID");
	Результат.Вставить("ИдентификаторЯзыка", "Locale");
	Результат.Вставить("МоментСозданияСеанса", "StartedAt");
	Результат.Вставить("МоментПоследнейАктивностиСеанса", "LastActiveAt");
	Результат.Вставить("БлокировкаСУБД", "blockedByDBMS");
	Результат.Вставить("Блокировка", "blockedByLS");
	Результат.Вставить("Передано", "bytesAll");
	Результат.Вставить("ПереданоЗа5Минут", "bytesLast5Min");
	Результат.Вставить("СерверныхВызовов", "callsAll");
	Результат.Вставить("СерверныхВызововЗа5Минут", "callsLast5Min");
	Результат.Вставить("ДлительностьСерверныхВызовов", "durationAll");
	Результат.Вставить("ДлительностьТекущегоСерверногоВызова", "durationCurrent");
	Результат.Вставить("ДлительностьСерверныхВызововЗа5Минут", "durationLast5Min");
	Результат.Вставить("ПереданоСУБД", "dbmsBytesAll");
	Результат.Вставить("ПереданоСУБДЗа5Минут", "dbmsBytesLast5Min");
	Результат.Вставить("ДлительностьВызововСУБД", "durationAllDBMS");
	Результат.Вставить("ДлительностьТекущегоВызоваСУБД", "durationCurrentDBMS");
	Результат.Вставить("ДлительностьВызововСУБДЗа5Минут", "durationLast5MinDBMS");
	Результат.Вставить("СоединениеСУБД", "dbProcInfo");
	Результат.Вставить("ВремяСоединенияСУБД", "dbProcTook");
	Результат.Вставить("МоментЗахватаСоединенияСУБД", "dbProcTookAt");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

Функция ПроверитьУсловияФильтра(Знач ПроверяемыйОбъект, Знач Фильтр = Неопределено) Экспорт
	
	Если Фильтр = Неопределено Или Фильтр.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыполненоУсловий = 0;
	
	Для Каждого Условие Из Фильтр Цикл
		
		Если ТипЗнч(Условие) = Тип("Структура") Тогда
			
			Поле = Условие.Свойство;
			ТребуемоеЗначение = Условие.Значение;
			ВидСравненияЗначений = Условие.ВидСравнения;
			
		ИначеЕсли ТипЗнч(Условие) = Тип("КлючИЗначение") Тогда
			
			Поле = Условие.Ключ;
			ТребуемоеЗначение = Условие.Значение;
			ВидСравненияЗначений = ВидСравнения.Равно;
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Некорректно задан фильтр!'");
			
		КонецЕсли;
		
		ПроверяемоеЗначение = ПроверяемыйОбъект[Поле];
		УсловиеВыполнено = ПроверитьУсловиеФильтра(ПроверяемоеЗначение, ВидСравненияЗначений, ТребуемоеЗначение);
		
		Если УсловиеВыполнено Тогда
			ВыполненоУсловий = ВыполненоУсловий + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыполненоУсловий = Фильтр.Количество();
	
КонецФункции

Функция ПроверитьУсловиеФильтра(Знач ПроверяемоеЗначение, Знач ВидСравненияЗначений, Знач Значение)
	
	Если ВидСравненияЗначений = ВидСравнения.Равно Тогда
		
		Возврат ПроверяемоеЗначение = Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.НеРавно Тогда
		
		Возврат ПроверяемоеЗначение <> Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.Больше Тогда
		
		Возврат ПроверяемоеЗначение > Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.БольшеИлиРавно Тогда
		
		Возврат ПроверяемоеЗначение >= Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.Меньше Тогда
		
		Возврат ПроверяемоеЗначение < Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.МеньшеИлиРавно Тогда
		
		Возврат ПроверяемоеЗначение <= Значение;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ВСписке Тогда
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Возврат Значение.НайтиПоЗначению(ПроверяемоеЗначение) <> Неопределено;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Возврат Значение.Найти(ПроверяемоеЗначение) <> Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.НеВСписке Тогда
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Возврат Значение.НайтиПоЗначению(ПроверяемоеЗначение) = Неопределено;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Возврат Значение.Найти(ПроверяемоеЗначение) = Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.Интервал Тогда
		
		Возврат ПроверяемоеЗначение > Значение.С И ПроверяемоеЗначение < Значение.По;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ИнтервалВключаяГраницы Тогда
		
		Возврат ПроверяемоеЗначение >= Значение.С И ПроверяемоеЗначение <= Значение.По;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ИнтервалВключаяНачало Тогда
		
		Возврат ПроверяемоеЗначение >= Значение.С И ПроверяемоеЗначение < Значение.По;
		
	ИначеЕсли ВидСравненияЗначений = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
		Возврат ПроверяемоеЗначение > Значение.С И ПроверяемоеЗначение <= Значение.По;
		
	КонецЕсли;
	
КонецФункции

Функция СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Claster)
	
	Для Каждого РабочийПроцесс Из СоединениеСАгентомСервера.GetWorkingProcesses(Claster) Цикл
		Если РабочийПроцесс.Running И РабочийПроцесс.IsEnable  Тогда
			СтрокаСоединенияСРабочимПроцессом = РабочийПроцесс.HostName + ":" + Формат(РабочийПроцесс.MainPort, "ЧГ=");
			Возврат COMСоединитель.ConnectWorkingProcess(СтрокаСоединенияСРабочимПроцессом);
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В кластере серверов %1:%2 не найдено активных рабочих процессов.'"),
		Claster.HostName,
		Формат(Claster.MainPort, "ЧГ=0"));
	
КонецФункции

Функция ОписаниеОбъектаОбъектнойМоделиCOMАдминистратора(Знач Объект, Знач Словарь)
	
	Описание = Новый Структура();
	Для Каждого ФрагментСловаря Из Словарь Цикл
		Если ЗначениеЗаполнено(Объект[ФрагментСловаря.Значение]) Тогда
			Описание.Вставить(ФрагментСловаря.Ключ, Объект[ФрагментСловаря.Значение]);
		Иначе
			Описание.Вставить(ФрагментСловаря.Ключ, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий()
	
	Результат = Новый Структура();
	
	Результат.Вставить("БлокировкаСеансов", "SessionsDenied");
	Результат.Вставить("ДатаС", "DeniedFrom");
	Результат.Вставить("ДатаПо", "DeniedTo");
	Результат.Вставить("Сообщение", "DeniedMessage");
	Результат.Вставить("КодРазрешения", "PermissionCode");
	Результат.Вставить("БлокировкаРегламентныхЗаданий", "ScheduledJobsDenied");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции